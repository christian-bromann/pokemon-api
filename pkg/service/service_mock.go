// // Code generated by MockGen. DO NOT EDIT.
// // Source: service.go
// //
// // Generated by this command:
// //
// //	mockgen -source=service.go -destination=service_mock_test.go -package=service -self_package=github.com/gitkoDev/pokemon-api/pkg/service
// //

// // Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/gitkoDev/pokemon-api/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateTrainer mocks base method.
func (m *MockAuthorization) CreateTrainer(trainer models.Trainer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrainer", trainer)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrainer indicates an expected call of CreateTrainer.
func (mr *MockAuthorizationMockRecorder) CreateTrainer(trainer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainer", reflect.TypeOf((*MockAuthorization)(nil).CreateTrainer), trainer)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(name, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", name, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(name, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), name, password)
}

// GetTrainer mocks base method.
func (m *MockAuthorization) GetTrainer(name, password string) (models.Trainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainer", name, password)
	ret0, _ := ret[0].(models.Trainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainer indicates an expected call of GetTrainer.
func (mr *MockAuthorizationMockRecorder) GetTrainer(name, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainer", reflect.TypeOf((*MockAuthorization)(nil).GetTrainer), name, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockPokedex is a mock of Pokedex interface.
type MockPokedex struct {
	ctrl     *gomock.Controller
	recorder *MockPokedexMockRecorder
}

// MockPokedexMockRecorder is the mock recorder for MockPokedex.
type MockPokedexMockRecorder struct {
	mock *MockPokedex
}

// NewMockPokedex creates a new mock instance.
func NewMockPokedex(ctrl *gomock.Controller) *MockPokedex {
	mock := &MockPokedex{ctrl: ctrl}
	mock.recorder = &MockPokedexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokedex) EXPECT() *MockPokedexMockRecorder {
	return m.recorder
}

// AddPokemon mocks base method.
func (m *MockPokedex) AddPokemon(pokemon models.Pokemon) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPokemon", pokemon)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPokemon indicates an expected call of AddPokemon.
func (mr *MockPokedexMockRecorder) AddPokemon(pokemon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPokemon", reflect.TypeOf((*MockPokedex)(nil).AddPokemon), pokemon)
}

// DeletePokemon mocks base method.
func (m *MockPokedex) DeletePokemon(pokemonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePokemon", pokemonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePokemon indicates an expected call of DeletePokemon.
func (mr *MockPokedexMockRecorder) DeletePokemon(pokemonId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePokemon", reflect.TypeOf((*MockPokedex)(nil).DeletePokemon), pokemonId)
}

// GetAll mocks base method.
func (m *MockPokedex) GetAll() ([]models.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPokedexMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPokedex)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockPokedex) GetById(pokemonId int) (models.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", pokemonId)
	ret0, _ := ret[0].(models.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPokedexMockRecorder) GetById(pokemonId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPokedex)(nil).GetById), pokemonId)
}

// UpdatePokemon mocks base method.
func (m *MockPokedex) UpdatePokemon(pokemon models.Pokemon, pokemonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePokemon", pokemon, pokemonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePokemon indicates an expected call of UpdatePokemon.
func (mr *MockPokedexMockRecorder) UpdatePokemon(pokemon, pokemonId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePokemon", reflect.TypeOf((*MockPokedex)(nil).UpdatePokemon), pokemon, pokemonId)
}
